```
= Excel Comparison Tool: Full Code Implementation

== Introduction
This document provides the complete code implementation for the Excel Comparison Tool, as specified in the Low-Level Design (LLD). The tool consists of a .NET 6 backend using EPPlus for Excel processing and an Angular 17 frontend for file uploads, diff visualization, and summary reports. The implementation covers core features: comparing cell values and formulas, generating highlighted output files, and displaying differences in a web interface. Optional features like merge and formatting comparison are noted as extensible.

== Design Details

=== Backend Design (.NET 6)

==== Class Diagram
....
[ExcelFile]
  - Worksheets: List<Worksheet>
  - Metadata: Dictionary<string, string>
  + GetWorksheet(name: string): Worksheet

[Worksheet]
  - Name: string
  - Cells: Cell[,]
  - Rows: int
  - Columns: int
  + GetCell(row: int, col: int): Cell

[Cell]
  - Row: int
  - Column: int
  - Value: string
  - Formula: string
  - Style: CellStyle
  + IsEmpty(): bool

[CellStyle]
  - Font: string
  - BackgroundColor: string

[DiffModel]
  - CellDiffs: List<CellDiff>
  - StructuralDiffs: List<StructuralDiff>
  - Summary: Summary
  + AddCellDiff(diff: CellDiff): void

[CellDiff]
  - Row: int
  - Column: int
  - OldValue: string
  - NewValue: string
  - OldFormula: string
  - NewFormula: string

[StructuralDiff]
  - Type: string (e.g., "RowAdded", "ColumnDeleted")
  - Details: string

[Summary]
  - TotalCellChanges: int
  - TotalFormulaChanges: int
  - TotalStructuralChanges: int

[ComparisonConfig]
  - CompareValues: bool
  - CompareFormulas: bool
  - CompareFormatting: bool
....

==== Class Descriptions
- *ExcelFile*: Represents an Excel workbook with a list of worksheets and metadata (e.g., author, last modified).
- *Worksheet*: Represents a sheet with a 2D array of cells, row/column counts, and name.
- *Cell*: Stores cell data (value, formula, style) and position.
- *CellStyle*: Captures formatting (font, background color).
- *DiffModel*: Aggregates comparison results, including cell differences, structural differences, and summary.
- *CellDiff*: Represents a single cell difference (value or formula).
- *StructuralDiff*: Describes structural changes (e.g., added rows).
- *Summary*: Summarizes total changes.
- *ComparisonConfig*: Specifies comparison scope (values, formulas, formatting).

==== Backend Components
- *ExcelReaderService*:
  - Responsibility: Reads .xlsx files using EPPlus, populating `ExcelFile` models.
  - Methods:
    - `Task<ExcelFile> ReadAsync(Stream stream)`: Loads file into `ExcelFile`.
  - Dependencies: EPPlus, Logger.
- *ExcelWriterService*:
  - Responsibility: Generates output .xlsx files with highlighted differences.
  - Methods:
    - `Task<Stream> WriteAsync(DiffModel diffModel)`: Creates output file with red highlights for changed cells.
  - Dependencies: EPPlus, Logger.
- *ComparisonEngine*:
  - Responsibility: Compares two `ExcelFile` objects, producing a `DiffModel`.
  - Methods:
    - `Task<DiffModel> CompareAsync(Stream file1, Stream file2, ComparisonConfig config)`: Compares files based on config.
  - Dependencies: ExcelReaderService, Logger.
- *MergeHandler*:
  - Responsibility: Applies merge operations to update an Excel file.
  - Methods:
    - `Task<Stream> MergeAsync(Stream baseFile, List<CellDiff> acceptedDiffs)`: Updates file with accepted changes.
  - Dependencies: ExcelWriterService, Logger.
- *ReportGenerator*:
  - Responsibility: Creates summary reports.
  - Methods:
    - `Summary GenerateSummary(DiffModel diffModel)`: Generates summary data.
  - Dependencies: None.
- *Logger*:
  - Responsibility: Logs operations and errors using Serilog.
  - Methods:
    - `LogInfo(string message)`: Logs informational messages.
    - `LogError(Exception ex, string message)`: Logs errors.
- *ErrorHandler*:
  - Responsibility: Handles exceptions and returns user-friendly messages.
  - Methods:
    - `string Handle(Exception ex)`: Converts exceptions to messages.

==== API Endpoints
[cols="1,1,2",options="header"]
|===
| Endpoint | Method | Description
| `/api/comparison/compare` | POST | Uploads two .xlsx files, returns `DiffModel` as JSON.
| `/api/comparison/merge` | POST | Applies merge operations, returns updated file stream.
| `/api/comparison/download` | GET | Downloads output .xlsx file with highlighted differences.
| `/api/comparison/summary` | GET | Returns summary report as JSON.
|===

==== API Implementation Details
- *POST /api/comparison/compare*:
  - Input: Multipart form data with two files (`file1`, `file2`) and `ComparisonConfig`.
  - Workflow:
    1. Validate file extensions and sizes.
    2. Call `ExcelReaderService.ReadAsync` for both files.
    3. Pass `ExcelFile` objects to `ComparisonEngine.CompareAsync`.
    4. Return `DiffModel` as JSON.
  - Response: HTTP 200 with `DiffModel` or 400 for invalid inputs.
- *POST /api/comparison/merge*:
  - Input: Base file and list of accepted `CellDiff` objects.
  - Workflow:
    1. Validate inputs.
    2. Call `MergeHandler.MergeAsync` to update file.
    3. Return updated file stream.
  - Response: HTTP 200 with file stream or 400 for errors.
- *GET /api/comparison/download*:
  - Workflow: Call `ExcelWriterService.WriteAsync` with cached `DiffModel`, return file stream.
  - Response: HTTP 200 with .xlsx file.
- *GET /api/comparison/summary*:
  - Workflow: Call `ReportGenerator.GenerateSummary` with cached `DiffModel`.
  - Response: HTTP 200 with `Summary` JSON.

==== Backend Workflow
1. User uploads files via Angular frontend.
2. API controller validates inputs and saves files temporarily.
3. `ExcelReaderService` loads files into `ExcelFile` models.
4. `ComparisonEngine` compares files, producing a `DiffModel`.
5. `ExcelWriterService` generates an output .xlsx file with highlighted differences.
6. `ReportGenerator` creates a summary.
7. API returns `DiffModel` or file stream to frontend.
8. For merge, `MergeHandler` updates the base file based on user selections.

=== Frontend Design (Angular 17)

==== Component Diagram
....
[AppComponent]
  |
  +--[FileUploadComponent]
  +--[DiffViewerComponent]
  +--[MergeComponent]
  +--[SummaryComponent]
....

==== Angular Components
- *FileUploadComponent*:
  - Responsibility: Allows users to upload two .xlsx files and set comparison options.
  - Template: `file-upload.component.html` with drag-and-drop inputs and Angular Material button.
  - Properties:
    - `file1: File`: First Excel file.
    - `file2: File`: Second Excel file.
    - `config: ComparisonConfig`: Comparison options.
  - Methods:
    - `onFileChange(event: Event, fileNumber: number)`: Updates file properties.
    - `compare()`: Calls `ComparisonService.compare`.
  - Dependencies: ComparisonService, Angular Material.
- *DiffViewerComponent*:
  - Responsibility: Displays differences in a side-by-side or inline table.
  - Template: `diff-viewer.component.html` with Angular Material table or PrimeNG DataTable.
  - Properties:
    - `diffModel: DiffModel`: Comparison results.
  - Methods:
    - `ngOnInit()`: Fetches `DiffModel` from `ComparisonService`.
  - Dependencies: ComparisonService, Angular Material/PrimeNG.
- *MergeComponent*:
  - Responsibility: Allows users to accept/reject changes.
  - Template: `merge.component.html` with checkboxes for each `CellDiff`.
  - Properties:
    - `diffModel: DiffModel`: Comparison results.
    - `acceptedDiffs: CellDiff[]`: User-selected changes.
  - Methods:
    - `acceptDiff(diff: CellDiff)`: Adds diff to `acceptedDiffs`.
    - `merge()`: Calls `MergeService.merge`.
  - Dependencies: MergeService, Angular Material.
- *SummaryComponent*:
  - Responsibility: Displays summary report.
  - Template: `summary.component.html` with summary stats and download button.
  - Properties:
    - `summary: Summary`: Summary data.
  - Methods:
    - `ngOnInit()`: Fetches summary from `ComparisonService`.
    - `download()`: Calls `ComparisonService.download`.
  - Dependencies: ComparisonService, Angular Material.

==== Angular Services
- *ComparisonService*:
  - Responsibility: Handles API calls for comparison and download.
  - Methods:
    - `compare(file1: File, file2: File, config: ComparisonConfig): Observable<DiffModel>`: Calls `/api/comparison/compare`.
    - `download(): Observable<Blob>`: Calls `/api/comparison/download`.
    - `getSummary(): Observable<Summary>`: Calls `/api/comparison/summary`.
  - Dependencies: HttpClient.
- *MergeService*:
  - Responsibility: Handles merge API calls.
  - Methods:
    - `merge(baseFile: File, acceptedDiffs: CellDiff[]): Observable<Blob>`: Calls `/api/comparison/merge`.
  - Dependencies: HttpClient.

==== Frontend Models
- `cell-diff.ts`:
```typescript
export interface CellDiff {
  row: number;
  column: number;
  oldValue: string;
  newValue: string;
  oldFormula: string;
  newFormula: string;
}
```
- `summary.ts`:
```typescript
export interface Summary {
  totalCellChanges: number;
  totalFormulaChanges: number;
  totalStructuralChanges: number;
}
```

==== Routing
- Routes defined in `app-routing.module.ts`:
  - `/upload`: FileUploadComponent
  - `/diff`: DiffViewerComponent
  - `/merge`: MergeComponent
  - `/summary`: SummaryComponent

==== Frontend Workflow
1. User navigates to `/upload`, selects two .xlsx files, and sets comparison options.
2. `FileUploadComponent` calls `ComparisonService.compare`, sending files to the backend.
3. Backend returns `DiffModel`, stored in `ComparisonService`.
4. User navigates to `/diff`, where `DiffViewerComponent` displays differences in a table.
5. User navigates to `/merge`, selects changes in `MergeComponent`, and calls `MergeService.merge`.
6. User navigates to `/summary`, where `SummaryComponent` shows stats and offers a download link.

=== Database/Storage
- *Temporary Storage*: Store uploaded files in a server-side temp directory (e.g., `wwwroot/temp`).
- *Cleanup*: Delete temp files after 1 hour or on session end.
- *Caching*: Use `IMemoryCache` to store `DiffModel` for 10 minutes to optimize download/summary requests.

=== Error Handling
- *Backend*:
  - Validate file extensions (.xlsx) and sizes (<100MB).
  - Return HTTP 400 for invalid inputs, 500 for server errors.
  - Log errors with Serilog (e.g., file corruption, out-of-memory).
- *Frontend*:
  - Display errors in Angular Material dialogs (e.g., "Invalid file format").
  - Log client-side errors to console.

=== Logging
- *Backend*: Use Serilog to log file uploads, comparison steps, and errors to a file (`logs/log.txt`).
- *Frontend*: Log API call results and errors to browser console.


== Folder Structure
The project follows the folder structure from the LLD:

```
ExcelComparisonTool/
├── backend/
│   ├── src/
│   │   ├── ExcelComparisonTool.Core/
│   │   │   ├── Models/
│   │   │   │   ├── ExcelFile.cs
│   │   │   │   ├── Worksheet.cs
│   │   │   │   ├── Cell.cs
│   │   │   │   ├── DiffModel.cs
│   │   │   │   └── ComparisonConfig.cs
│   │   │   ├── Services/
│   │   │   │   ├── ExcelReaderService.cs
│   │   │   │   ├── ExcelWriterService.cs
│   │   │   │   ├── ComparisonEngine.cs
│   │   │   │   └── ReportGenerator.cs
│   │   │   ├── Utilities/
│   │   │   │   ├── Logger.cs
│   │   │   │   └── ErrorHandler.cs
│   │   │   ├── ExcelComparisonTool.Core.csproj
│   │   │   └── appsettings.json
│   │   ├── ExcelComparisonTool.Api/
│   │   │   ├── Controllers/
│   │   │   │   └── ComparisonController.cs
│   │   │   ├── Program.cs
│   │   │   ├── ExcelComparisonTool.Api.csproj
│   │   │   └── appsettings.json
│   ├── tests/
│   │   ├── ExcelComparisonTool.Tests/
│   │   │   ├── UnitTests/
│   │   │   │   ├── ComparisonEngineTests.cs
│   │   │   ├── TestData/
│   │   │   │   ├── TestSheet1.xlsx
│   │   │   │   └── TestSheet2.xlsx
│   │   │   └── ExcelComparisonTool.Tests.csproj
├── frontend/
│   ├── excel-comparison-tool/
│   │   ├── src/
│   │   │   ├── app/
│   │   │   │   ├── components/
│   │   │   │   │   ├── file-upload/
│   │   │   │   │   │   ├── file-upload.component.ts
│   │   │   │   │   │   ├── file-upload.component.html
│   │   │   │   │   │   └── file-upload.component.css
│   │   │   │   │   ├── diff-viewer/
│   │   │   │   │   │   ├── diff-viewer.component.ts
│   │   │   │   │   │   ├── diff-viewer.component.html
│   │   │   │   │   │   └── diff-viewer.component.css
│   │   │   │   │   ├── summary/
│   │   │   │   │   │   ├── summary.component.ts
│   │   │   │   │   │   ├── summary.component.html
│   │   │   │   │   │   └── summary.component.css
│   │   │   │   ├── services/
│   │   │   │   │   ├── comparison.service.ts
│   │   │   │   ├── models/
│   │   │   │   │   ├── cell-diff.ts
│   │   │   │   │   └── summary.ts
│   │   │   │   ├── app.component.ts
│   │   │   │   ├── app.component.html
│   │   │   │   ├── app.module.ts
│   │   │   │   └── app-routing.module.ts
│   │   │   ├── assets/
│   │   │   ├── environments/
│   │   │   │   ├── environment.ts
│   │   │   │   └── environment.prod.ts
│   │   │   ├── styles.css
│   │   │   ├── index.html
│   │   ├── angular.json
│   │   ├── package.json
│   │   ├── tsconfig.json
│   │   └── karma.conf.js
├── docs/
│   ├── LLD.adoc
│   └── README.md
├── ExcelComparisonTool.sln
└── .gitignore
```

== Setup Instructions
1. **Backend Setup**:
   - Create a .NET 6 solution:
     ```bash
     mkdir ExcelComparisonTool
     cd ExcelComparisonTool
     dotnet new sln
     mkdir backend
     cd backend
     mkdir src tests
     cd src
     dotnet new classlib -n ExcelComparisonTool.Core
     dotnet new webapi -n ExcelComparisonTool.Api
     cd ../tests
     dotnet new xunit -n ExcelComparisonTool.Tests
     cd ..
     dotnet sln add src/ExcelComparisonTool.Core/ExcelComparisonTool.Core.csproj
     dotnet sln add src/ExcelComparisonTool.Api/ExcelComparisonTool.Api.csproj
     dotnet sln add tests/ExcelComparisonTool.Tests/ExcelComparisonTool.Tests.csproj
     ```
   - Install dependencies for `ExcelComparisonTool.Core`:
     ```bash
     cd src/ExcelComparisonTool.Core
     dotnet add package EPPlus --version 6.0.6
     dotnet add package Microsoft.Extensions.Logging.Abstractions --version 6.0.0
     ```
   - Add Core reference to API:
     ```bash
     cd ../ExcelComparisonTool.Api
     dotnet add reference ../ExcelComparisonTool.Core/ExcelComparisonTool.Core.csproj
     ```
2. **Frontend Setup**:
   - Create Angular project:
     ```bash
     cd ../..
     mkdir frontend
     cd frontend
     ng new excel-comparison-tool
     cd excel-comparison-tool
     ng add @angular/material
     ng g component components/file-upload
     ng g component components/diff-viewer
     ng g component components/summary
     ng g service services/comparison
     ng g interface models/cell-diff
     ng g interface models/summary
     ```
3. **Run the Application**:
   - Backend: `cd backend/src/ExcelComparisonTool.Api && dotnet run`
   - Frontend: `cd frontend/excel-comparison-tool && ng serve`
   - Access at `http://localhost:4200`, with backend at `http://localhost:5000`.

== Backend Code

=== ExcelComparisonTool.Core/Models/ExcelFile.cs
[source,csharp]
----
using System.Collections.Generic;

namespace ExcelComparisonTool.Core.Models
{
    public class ExcelFile
    {
        public List<Worksheet> Worksheets { get; set; } = new List<Worksheet>();
        public Dictionary<string, string> Metadata { get; set; } = new Dictionary<string, string>();

        public Worksheet GetWorksheet(string name)
        {
            return Worksheets.Find(w => w.Name == name);
        }
    }
}
----

=== ExcelComparisonTool.Core/Models/Worksheet.cs
[source,csharp]
----
namespace ExcelComparisonTool.Core.Models
{
    public class Worksheet
    {
        public string Name { get; set; }
        public Cell[,] Cells { get; set; }
        public int Rows { get; set; }
        public int Columns { get; set; }

        public Cell GetCell(int row, int col)
        {
            return (row <= Rows && col <= Columns && row > 0 && col > 0) ? Cells[row - 1, col - 1] : new Cell { Row = row, Column = col };
        }
    }
}
----

=== ExcelComparisonTool.Core/Models/Cell.cs
[source,csharp]
----
namespace ExcelComparisonTool.Core.Models
{
    public class Cell
    {
        public int Row { get; set; }
        public int Column { get; set; }
        public string Value { get; set; } = string.Empty;
        public string Formula { get; set; } = string.Empty;
        public CellStyle Style { get; set; } = new CellStyle();

        public bool IsEmpty() => string.IsNullOrEmpty(Value) && string.IsNullOrEmpty(Formula);
    }
}
----

=== ExcelComparisonTool.Core/Models/CellStyle.cs
[source,csharp]
----
namespace ExcelComparisonTool.Core.Models
{
    public class CellStyle
    {
        public string Font { get; set; } = string.Empty;
        public string BackgroundColor { get; set; } = string.Empty;
    }
}
----

=== ExcelComparisonTool.Core/Models/DiffModel.cs
[source,csharp]
----
using System.Collections.Generic;

namespace ExcelComparisonTool.Core.Models
{
    public class DiffModel
    {
        public List<CellDiff> CellDiffs { get; set; } = new List<CellDiff>();
        public List<StructuralDiff> StructuralDiffs { get; set; } = new List<StructuralDiff>();
        public Summary Summary { get; set; } = new Summary();

        public void AddCellDiff(CellDiff diff)
        {
            CellDiffs.Add(diff);
        }
    }
}
----

=== ExcelComparisonTool.Core/Models/CellDiff.cs
[source,csharp]
----
namespace ExcelComparisonTool.Core.Models
{
    public class CellDiff
    {
        public int Row { get; set; }
        public int Column { get; set; }
        public string OldValue { get; set; } = string.Empty;
        public string NewValue { get; set; } = string.Empty;
        public string OldFormula { get; set; } = string.Empty;
        public string NewFormula { get; set; } = string.Empty;
    }
}
----

=== ExcelComparisonTool.Core/Models/StructuralDiff.cs
[source,csharp]
----
namespace ExcelComparisonTool.Core.Models
{
    public class StructuralDiff
    {
        public string Type { get; set; } = string.Empty;
        public string Details { get; set; } = string.Empty;
    }
}
----

=== ExcelComparisonTool.Core/Models/Summary.cs
[source,csharp]
----
namespace ExcelComparisonTool.Core.Models
{
    public class Summary
    {
        public int TotalCellChanges { get; set; }
        public int TotalFormulaChanges { get; set; }
        public int TotalStructuralChanges { get; set; }
    }
}
----

=== ExcelComparisonTool.Core/Models/ComparisonConfig.cs
[source,csharp]
----
namespace ExcelComparisonTool.Core.Models
{
    public class ComparisonConfig
    {
        public bool CompareValues { get; set; } = true;
        public bool CompareFormulas { get; set; } = true;
        public bool CompareFormatting { get; set; } = false;
    }
}
----

=== ExcelComparisonTool.Core/Services/ExcelReaderService.cs
[source,csharp]
----
using OfficeOpenXml;
using System;
using System.IO;
using System.Threading.Tasks;
using ExcelComparisonTool.Core.Models;
using Microsoft.Extensions.Logging;

namespace ExcelComparisonTool.Core.Services
{
    public class ExcelReaderService
    {
        private readonly ILogger<ExcelReaderService> _logger;

        public ExcelReaderService(ILogger<ExcelReaderService> logger)
        {
            _logger = logger;
        }

        public async Task<ExcelFile> ReadAsync(Stream stream)
        {
            _logger.LogInformation("Reading Excel file");
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using var package = new ExcelPackage(stream);
            var excelFile = new ExcelFile();

            foreach (var worksheet in package.Workbook.Worksheets)
            {
                var ws = new Worksheet
                {
                    Name = worksheet.Name,
                    Rows = worksheet.Dimension?.Rows ?? 0,
                    Columns = worksheet.Dimension?.Columns ?? 0
                };
                ws.Cells = new Cell[ws.Rows, ws.Columns];

                for (int row = 1; row <= ws.Rows; row++)
                {
                    for (int col = 1; col <= ws.Columns; col++)
                    {
                        ws.Cells[row - 1, col - 1] = new Cell
                        {
                            Row = row,
                            Column = col,
                            Value = worksheet.Cells[row, col].Text ?? string.Empty,
                            Formula = worksheet.Cells[row, col].Formula ?? string.Empty
                            // Style can be added for formatting comparison
                        };
                    }
                }
                excelFile.Worksheets.Add(ws);
            }

            _logger.LogInformation("Excel file read successfully");
            return excelFile;
        }
    }
}
----

=== ExcelComparisonTool.Core/Services/ExcelWriterService.cs
[source,csharp]
----
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System;
using System.IO;
using System.Threading.Tasks;
using ExcelComparisonTool.Core.Models;
using Microsoft.Extensions.Logging;

namespace ExcelComparisonTool.Core.Services
{
    public class ExcelWriterService
    {
        private readonly ILogger<ExcelWriterService> _logger;

        public ExcelWriterService(ILogger<ExcelWriterService> logger)
        {
            _logger = logger;
        }

        public async Task<Stream> WriteAsync(DiffModel diffModel)
        {
            _logger.LogInformation("Writing output Excel file");
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using var package = new ExcelPackage();
            var worksheet = package.Workbook.Worksheets.Add("Differences");

            foreach (var diff in diffModel.CellDiffs)
            {
                var cell = worksheet.Cells[diff.Row, diff.Column];
                cell.Value = $"{diff.OldValue} -> {diff.NewValue}";
                cell.Style.Fill.PatternType = ExcelFillStyle.Solid;
                cell.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Red);
            }

            var stream = new MemoryStream();
            await package.SaveAsync(stream);
            stream.Position = 0;
            _logger.LogInformation("Output Excel file written successfully");
            return stream;
        }
    }
}
----

=== ExcelComparisonTool.Core/Services/ComparisonEngine.cs
[source,csharp]
----
using System;
using System.Threading.Tasks;
using ExcelComparisonTool.Core.Models;
using Microsoft.Extensions.Logging;

namespace ExcelComparisonTool.Core.Services
{
    public class ComparisonEngine
    {
        private readonly ExcelReaderService _reader;
        private readonly ILogger<ComparisonEngine> _logger;

        public ComparisonEngine(ExcelReaderService reader, ILogger<ComparisonEngine> logger)
        {
            _reader = reader;
            _logger = logger;
        }

        public async Task<DiffModel> CompareAsync(Stream file1, Stream file2, ComparisonConfig config)
        {
            _logger.LogInformation("Starting comparison");
            var excel1 = await _reader.ReadAsync(file1);
            var excel2 = await _reader.ReadAsync(file2);
            var diffModel = new DiffModel();

            foreach (var sheet1 in excel1.Worksheets)
            {
                var sheet2 = excel2.GetWorksheet(sheet1.Name);
                if (sheet2 == null)
                {
                    diffModel.StructuralDiffs.Add(new StructuralDiff { Type = "SheetMissing", Details = sheet1.Name });
                    diffModel.Summary.TotalStructuralChanges++;
                    continue;
                }

                int maxRows = Math.Max(sheet1.Rows, sheet2.Rows);
                int maxCols = Math.Max(sheet1.Columns, sheet2.Columns);

                for (int row = 1; row <= maxRows; row++)
                {
                    for (int col = 1; col <= maxCols; col++)
                    {
                        var cell1 = sheet1.GetCell(row, col);
                        var cell2 = sheet2.GetCell(row, col);

                        if (config.CompareValues && cell1.Value != cell2.Value)
                        {
                            diffModel.AddCellDiff(new CellDiff
                            {
                                Row = row,
                                Column = col,
                                OldValue = cell1.Value,
                                NewValue = cell2.Value
                            });
                            diffModel.Summary.TotalCellChanges++;
                        }

                        if (config.CompareFormulas && cell1.Formula != cell2.Formula)
                        {
                            diffModel.AddCellDiff(new CellDiff
                            {
                                Row = row,
                                Column = col,
                                OldFormula = cell1.Formula,
                                NewFormula = cell2.Formula
                            });
                            diffModel.Summary.TotalFormulaChanges++;
                        }
                    }
                }
            }

            _logger.LogInformation($"Comparison completed: {diffModel.Summary.TotalCellChanges} cell changes");
            return diffModel;
        }
    }
}
----

=== ExcelComparisonTool.Core/Services/ReportGenerator.cs
[source,csharp]
----
using ExcelComparisonTool.Core.Models;

namespace ExcelComparisonTool.Core.Services
{
    public class ReportGenerator
    {
        public Summary GenerateSummary(DiffModel diffModel)
        {
            return diffModel.Summary;
        }
    }
}
----

=== ExcelComparisonTool.Core/Utilities/Logger.cs
[source,csharp]
----
using Microsoft.Extensions.Logging;

namespace ExcelComparisonTool.Core.Utilities
{
    public class Logger<T> : ILogger<T>
    {
        private readonly ILogger _logger;

        public Logger(ILoggerFactory factory)
        {
            _logger = factory.CreateLogger(typeof(T).Name);
        }

        public IDisposable BeginScope<TState>(TState state) => _logger.BeginScope(state);
        public bool IsEnabled(LogLevel logLevel) => _logger.IsEnabled(logLevel);
        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
            => _logger.Log(logLevel, eventId, state, exception, formatter);
    }
}
----

=== ExcelComparisonTool.Core/Utilities/ErrorHandler.cs
[source,csharp]
----
using System;

namespace ExcelComparisonTool.Core.Utilities
{
    public class ErrorHandler
    {
        public string Handle(Exception ex)
        {
            return ex switch
            {
                FileFormatException => "Invalid Excel file format.",
                OutOfMemoryException => "File too large to process.",
                _ => "An unexpected error occurred."
            };
        }
    }
}
----

=== ExcelComparisonTool.Core/ExcelComparisonTool.Core.csproj
[source,xml]
----
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="EPPlus" Version="6.0.6" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="6.0.0" />
  </ItemGroup>
</Project>
----

=== ExcelComparisonTool.Core/appsettings.json
[source,json]
----
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning"
    }
  }
}
----

=== ExcelComparisonTool.Api/Controllers/ComparisonController.cs
[source,csharp]
----
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using ExcelComparisonTool.Core.Services;
using ExcelComparisonTool.Core.Models;
using System.IO;

namespace ExcelComparisonTool.Api.Controllers
{
    [ApiController]
    [Route("api/comparison")]
    public class ComparisonController : ControllerBase
    {
        private readonly ComparisonEngine _comparisonEngine;
        private readonly ExcelWriterService _writerService;
        private readonly ReportGenerator _reportGenerator;
        private DiffModel _cachedDiffModel;

        public ComparisonController(ComparisonEngine comparisonEngine, ExcelWriterService writerService, ReportGenerator reportGenerator)
        {
            _comparisonEngine = comparisonEngine;
            _writerService = writerService;
            _reportGenerator = reportGenerator;
        }

        [HttpPost("compare")]
        public async Task<IActionResult> Compare([FromForm] IFormFile file1, [FromForm] IFormFile file2, [FromForm] ComparisonConfig config)
        {
            if (file1 == null || file2 == null || !file1.FileName.EndsWith(".xlsx") || !file2.FileName.EndsWith(".xlsx"))
                return BadRequest("Two valid .xlsx files are required.");

            try
            {
                using var stream1 = file1.OpenReadStream();
                using var stream2 = file2.OpenReadStream();
                _cachedDiffModel = await _comparisonEngine.CompareAsync(stream1, stream2, config);
                return Ok(_cachedDiffModel);
            }
            catch (Exception ex)
            {
                return BadRequest(new ErrorHandler().Handle(ex));
            }
        }

        [HttpGet("download")]
        public async Task<IActionResult> Download()
        {
            if (_cachedDiffModel == null)
                return BadRequest("No comparison data available.");

            var stream = await _writerService.WriteAsync(_cachedDiffModel);
            return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "differences.xlsx");
        }

        [HttpGet("summary")]
        public IActionResult GetSummary()
        {
            if (_cachedDiffModel == null)
                return BadRequest("No comparison data available.");

            var summary = _reportGenerator.GenerateSummary(_cachedDiffModel);
            return Ok(summary);
        }
    }
}
----

=== ExcelComparisonTool.Api/Program.cs
[source,csharp]
----
using Microsoft.Extensions.DependencyInjection;
using ExcelComparisonTool.Core.Services;
using Microsoft.Extensions.Logging;

var builder = WebApplication.CreateBuilder(args);

// Add services
builder.Services.AddControllers();
builder.Services.AddSingleton<ExcelReaderService>();
builder.Services.AddSingleton<ExcelWriterService>();
builder.Services.AddSingleton<ComparisonEngine>();
builder.Services.AddSingleton<ReportGenerator>();
builder.Services.AddLogging(logging => logging.AddConsole());
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAngular", builder =>
        builder.WithOrigins("http://localhost:4200").AllowAnyMethod().AllowAnyHeader());
});

var app = builder.Build();

// Configure middleware
app.UseCors("AllowAngular");
app.UseAuthorization();
app.MapControllers();

app.Run();
----

=== ExcelComparisonTool.Api/ExcelComparisonTool.Api.csproj
[source,xml]
----
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="../ExcelComparisonTool.Core/ExcelComparisonTool.Core.csproj" />
  </ItemGroup>
</Project>
----

=== ExcelComparisonTool.Api/appsettings.json
[source,json]
----
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*"
}
----

=== ExcelComparisonTool.Tests/UnitTests/ComparisonEngineTests.cs
[source,csharp]
----
using System.IO;
using System.Threading.Tasks;
using ExcelComparisonTool.Core.Services;
using ExcelComparisonTool.Core.Models;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace ExcelComparisonTool.Tests.UnitTests
{
    public class ComparisonEngineTests
    {
        [Fact]
        public async Task CompareAsync_DifferentValues_ReturnsCellDiffs()
        {
            var logger = new Mock<ILogger<ComparisonEngine>>().Object;
            var readerMock = new Mock<ExcelReaderService>(logger);
            readerMock.Setup(r => r.ReadAsync(It.IsAny<Stream>())).ReturnsAsync(new ExcelFile
            {
                Worksheets = { new Worksheet
                {
                    Name = "Sheet1",
                    Rows = 1,
                    Columns = 1,
                    Cells = new Cell[,] { { new Cell { Row = 1, Column = 1, Value = "A" } } }
                }}
            });

            var engine = new ComparisonEngine(readerMock.Object, logger);
            var config = new ComparisonConfig { CompareValues = true };

            using var stream1 = new MemoryStream();
            using var stream2 = new MemoryStream();
            var diffModel = await engine.CompareAsync(stream1, stream2, config);

            Assert.NotNull(diffModel);
            Assert.Equal(1, diffModel.Summary.TotalCellChanges);
        }
    }
}
----

=== ExcelComparisonTool.Tests/ExcelComparisonTool.Tests.csproj
[source,xml]
----
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="../src/ExcelComparisonTool.Core/ExcelComparisonTool.Core.csproj" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.3.2" />
    <PackageReference Include="xunit" Version="2.4.2" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.4.5" />
    <PackageReference Include="Moq" Version="4.18.4" />
  </ItemGroup>
</Project>
----

== Frontend Code

=== frontend/excel-comparison-tool/src/app/app.component.ts
[source,typescript]
----
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  title = 'Excel Comparison Tool';
}
----

=== frontend/excel-comparison-tool/src/app/app.component.html
[source,html]
----
<h1>{{title}}</h1>
<router-outlet></router-outlet>
----

=== frontend/excel-comparison-tool/src/app/app.module.ts
[source,typescript]
----
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatTableModule } from '@angular/material/table';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { FileUploadComponent } from './components/file-upload/file-upload.component';
import { DiffViewerComponent } from './components/diff-viewer/diff-viewer.component';
import { SummaryComponent } from './components/summary/summary.component';

@NgModule({
  declarations: [
    AppComponent,
    FileUploadComponent,
    DiffViewerComponent,
    SummaryComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    BrowserAnimationsModule,
    MatButtonModule,
    MatFormFieldModule,
    MatTableModule,
    AppRoutingModule
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }
----

=== frontend/excel-comparison-tool/src/app/app-routing.module.ts
[source,typescript]
----
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { FileUploadComponent } from './components/file-upload/file-upload.component';
import { DiffViewerComponent } from './components/diff-viewer/diff-viewer.component';
import { SummaryComponent } from './components/summary/summary.component';

const routes: Routes = [
  { path: 'upload', component: FileUploadComponent },
  { path: 'diff', component: DiffViewerComponent },
  { path: 'summary', component: SummaryComponent },
  { path: '', redirectTo: '/upload', pathMatch: 'full' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
----

=== frontend/excel-comparison-tool/src/app/components/file-upload/file-upload.component.ts
[source,typescript]
----
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { ComparisonService } from '../../services/comparison.service';
import { ComparisonConfig } from '../../models/comparison-config';

@Component({
  selector: 'app-file-upload',
  templateUrl: './file-upload.component.html',
  styleUrls: ['./file-upload.component.css']
})
export class FileUploadComponent {
  file1: File | null = null;
  file2: File | null = null;
  config: ComparisonConfig = { compareValues: true, compareFormulas: true, compareFormatting: false };

  constructor(private comparisonService: ComparisonService, private router: Router) {}

  onFileChange(event: Event, fileNumber: number) {
    const input = event.target as HTMLInputElement;
    if (input.files) {
      fileNumber === 1 ? (this.file1 = input.files[0]) : (this.file2 = input.files[0]);
    }
  }

  compare() {
    if (this.file1 && this.file2) {
      this.comparisonService.compare(this.file1, this.file2, this.config).subscribe({
        next: (diffModel) => {
          this.comparisonService.setDiffModel(diffModel);
          this.router.navigate(['/diff']);
        },
        error: (err) => alert('Error: ' + err.error)
      });
    } else {
      alert('Please select two .xlsx files.');
    }
  }
}
----

=== frontend/excel-comparison-tool/src/app/components/file-upload/file-upload.component.html
[source,html]
----
<div class="container">
  <h2>Upload Excel Files</h2>
  <mat-form-field>
    <input type="file" (change)="onFileChange($event, 1)" accept=".xlsx">
  </mat-form-field>
  <mat-form-field>
    <input type="file" (change)="onFileChange($event, 2)" accept=".xlsx">
  </mat-form-field>
  <button mat-raised-button color="primary" (click)="compare()" [disabled]="!file1 || !file2">Compare</button>
</div>
----

=== frontend/excel-comparison-tool/src/app/components/file-upload/file-upload.component.css
[source,css]
----
.container {
  padding: 20px;
  text-align: center;
}
mat-form-field {
  margin: 10px;
}
button {
  margin-top: 10px;
}
----

=== frontend/excel-comparison-tool/src/app/components/diff-viewer/diff-viewer.component.ts
[source,typescript]
----
import { Component, OnInit } from '@angular/core';
import { ComparisonService } from '../../services/comparison.service';
import { CellDiff } from '../../models/cell-diff';
import { Router } from '@angular/router';

@Component({
  selector: 'app-diff-viewer',
  templateUrl: './diff-viewer.component.html',
  styleUrls: ['./diff-viewer.component.css']
})
export class DiffViewerComponent implements OnInit {
  displayedColumns: string[] = ['row', 'column', 'oldValue', 'newValue', 'oldFormula', 'newFormula'];
  dataSource: CellDiff[] = [];

  constructor(private comparisonService: ComparisonService, private router: Router) {}

  ngOnInit() {
    const diffModel = this.comparisonService.getDiffModel();
    if (diffModel) {
      this.dataSource = diffModel.cellDiffs;
    } else {
      this.router.navigate(['/upload']);
    }
  }

  goToSummary() {
    this.router.navigate(['/summary']);
  }

  download() {
    this.comparisonService.download().subscribe(blob => {
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'differences.xlsx';
      a.click();
      window.URL.revokeObjectURL(url);
    });
  }
}
----

=== frontend/excel-comparison-tool/src/app/components/diff-viewer/diff-viewer.component.html
[source,html]
----
<div class="container">
  <h2>Differences</h2>
  <mat-table [dataSource]="dataSource">
    <ng-container matColumnDef="row">
      <mat-header-cell *matHeaderCellDef>Row</mat-header-cell>
      <mat-cell *matCellDef="let diff">{{diff.row}}</mat-cell>
    </ng-container>
    <ng-container matColumnDef="column">
      <mat-header-cell *matHeaderCellDef>Column</mat-header-cell>
      <mat-cell *matCellDef="let diff">{{diff.column}}</mat-cell>
    </ng-container>
    <ng-container matColumnDef="oldValue">
      <mat-header-cell *matHeaderCellDef>Old Value</mat-header-cell>
      <mat-cell *matCellDef="let diff">{{diff.oldValue}}</mat-cell>
    </ng-container>
    <ng-container matColumnDef="newValue">
      <mat-header-cell *matHeaderCellDef>New Value</mat-header-cell>
      <mat-cell *matCellDef="let diff">{{diff.newValue}}</mat-cell>
    </ng-container>
    <ng-container matColumnDef="oldFormula">
      <mat-header-cell *matHeaderCellDef>Old Formula</mat-header-cell>
      <mat-cell *matCellDef="let diff">{{diff.oldFormula}}</mat-cell>
    </ng-container>
    <ng-container matColumnDef="newFormula">
      <mat-header-cell *matHeaderCellDef>New Formula</mat-header-cell>
      <mat-cell *matCellDef="let diff">{{diff.newFormula}}</mat-cell>
    </ng-container>
    <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
    <mat-row *matRowDef="let row; columns: displayedColumns;"></mat-row>
  </mat-table>
  <button mat-raised-button color="primary" (click)="goToSummary()">View Summary</button>
  <button mat-raised-button color="accent" (click)="download()">Download Output</button>
</div>
----

=== frontend/excel-comparison-tool/src/app/components/diff-viewer/diff-viewer.component.css
[source,css]
----
.container {
  padding: 20px;
}
mat-table {
  width: 100%;
  margin-bottom: 20px;
}
button {
  margin: 10px;
}
mat-cell, mat-header-cell {
  padding: 8px;
}
----

=== frontend/excel-comparison-tool/src/app/components/summary/summary.component.ts
[source,typescript]
----
import { Component, OnInit } from '@angular/core';
import { ComparisonService } from '../../services/comparison.service';
import { Summary } from '../../models/summary';
import { Router } from '@angular/router';

@Component({
  selector: 'app-summary',
  templateUrl: './summary.component.html',
  styleUrls: ['./summary.component.css']
})
export class SummaryComponent implements OnInit {
  summary: Summary | null = null;

  constructor(private comparisonService: ComparisonService, private router: Router) {}

  ngOnInit() {
    this.comparisonService.getSummary().subscribe({
      next: (summary) => this.summary = summary,
      error: () => this.router.navigate(['/upload'])
    });
  }
}
----

=== frontend/excel-comparison-tool/src/app/components/summary/summary.component.html
[source,html]
----
<div class="container">
  <h2>Summary</h2>
  <div *ngIf="summary">
    <p>Total Cell Changes: {{summary.totalCellChanges}}</p>
    <p>Total Formula Changes: {{summary.totalFormulaChanges}}</p>
    <p>Total Structural Changes: {{summary.totalStructuralChanges}}</p>
  </div>
  <button mat-raised-button color="primary" (click)="router.navigate(['/upload'])">Back to Upload</button>
</div>
----

=== frontend/excel-comparison-tool/src/app/components/summary/summary.component.css
[source,css]
----
.container {
  padding: 20px;
  text-align: center;
}
p {
  font-size: 16px;
  margin: 10px 0;
}
----

=== frontend/excel-comparison-tool/src/app/services/comparison.service.ts
[source,typescript]
----
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CellDiff, DiffModel } from '../models/cell-diff';
import { Summary } from '../models/summary';
import { ComparisonConfig } from '../models/comparison-config';

@Injectable({
  providedIn: 'root'
})
export class ComparisonService {
  private apiUrl = 'http://localhost:5000/api/comparison';
  private diffModel: DiffModel | null = null;

  constructor(private http: HttpClient) {}

  compare(file1: File, file2: File, config: ComparisonConfig): Observable<DiffModel> {
    const formData = new FormData();
    formData.append('file1', file1);
    formData.append('file2', file2);
    formData.append('config', JSON.stringify(config));
    return this.http.post<DiffModel>(`${this.apiUrl}/compare`, formData);
  }

  setDiffModel(diffModel: DiffModel) {
    this.diffModel = diffModel;
  }

  getDiffModel(): DiffModel | null {
    return this.diffModel;
  }

  download(): Observable<Blob> {
    return this.http.get(`${this.apiUrl}/download`, { responseType: 'blob' });
  }

  getSummary(): Observable<Summary> {
    return this.http.get<Summary>(`${this.apiUrl}/summary`);
  }
}
----

=== frontend/excel-comparison-tool/src/app/models/cell-diff.ts
[source,typescript]
----
export interface CellDiff {
  row: number;
  column: number;
  oldValue: string;
  newValue: string;
  oldFormula: string;
  newFormula: string;
}

export interface DiffModel {
  cellDiffs: CellDiff[];
  structuralDiffs: { type: string; details: string }[];
  summary: Summary;
}
----

=== frontend/excel-comparison-tool/src/app/models/summary.ts
[source,typescript]
----
export interface Summary {
  totalCellChanges: number;
  totalFormulaChanges: number;
  totalStructuralChanges: number;
}
----

=== frontend/excel-comparison-tool/src/app/models/comparison-config.ts
[source,typescript]
----
export interface ComparisonConfig {
  compareValues: boolean;
  compareFormulas: boolean;
  compareFormatting: boolean;
}
----

=== frontend/excel-comparison-tool/src/environments/environment.ts
[source,typescript]
----
export const environment = {
  production: false,
  apiUrl: 'http://localhost:5000/api/comparison'
};
----

=== frontend/excel-comparison-tool/src/environments/environment.prod.ts
[source,typescript]
----
export const environment = {
  production: true,
  apiUrl: '/api/comparison'
};
----

=== frontend/excel-comparison-tool/src/styles.css
[source,css]
----
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
}
----

=== frontend/excel-comparison-tool/src/index.html
[source,html]
----
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Excel Comparison Tool</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
  <app-root></app-root>
</body>
</html>
----

=== frontend/excel-comparison-tool/angular.json
[source,json]
----
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "excel-comparison-tool": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/excel-comparison-tool",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.app.json",
            "assets": ["src/favicon.ico", "src/assets"],
            "styles": ["src/styles.css"],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                }
              ],
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ]
            }
          }
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "browserTarget": "excel-comparison-tool:build"
          },
          "configurations": {
            "production": {
              "browserTarget": "excel-comparison-tool:build:production"
            }
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": "karma.conf.js",
            "assets": ["src/favicon.ico", "src/assets"],
            "styles": ["src/styles.css"],
            "scripts": []
          }
        }
      }
    }
  },
  "defaultProject": "excel-comparison-tool"
}
----

=== frontend/excel-comparison-tool/package.json
[source,json]
----
{
  "name": "excel-comparison-tool",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "~17.0.0",
    "@angular/common": "~17.0.0",
    "@angular/compiler": "~17.0.0",
    "@angular/core": "~17.0.0",
    "@angular/forms": "~17.0.0",
    "@angular/platform-browser": "~17.0.0",
    "@angular/platform-browser-dynamic": "~17.0.0",
    "@angular/router": "~17.0.0",
    "@angular/material": "^17.0.0",
    "rxjs": "~7.5.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.14.2"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~17.0.0",
    "@angular/cli": "~17.0.0",
    "@angular/compiler-cli": "~17.0.0",
    "@types/jasmine": "~4.3.0",
    "jasmine-core": "~4.4.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "typescript": "~5.2.2"
  }
}
----

=== frontend/excel-comparison-tool/tsconfig.json
[source,json]
----
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "src",
    "outDir": "./dist/out-tsc",
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "module": "es2020",
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "es2020",
    "typeRoots": ["node_modules/@types"],
    "lib": ["es2020", "dom"]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}
----

=== frontend/excel-comparison-tool/karma.conf.js
[source,javascript]
----
// Karma configuration file
module.exports = function (config) {
  config.set({
    basePath: '',
    frameworks: ['jasmine', '@angular-devkit/build-angular'],
    plugins: [
      require('karma-jasmine'),
      require('karma-chrome-launcher'),
      require('karma-jasmine-html-reporter'),
      require('karma-coverage'),
      require('@angular-devkit/build-angular/plugins/karma')
    ],
    client: {
      jasmine: {},
      clearContext: false
    },
    jasmineHtmlReporter: {
      suppressAll: true
    },
    coverageReporter: {
      dir: require('path').join(__dirname, './coverage/excel-comparison-tool'),
      subdir: '.',
      reporters: [{ type: 'html' }, { type: 'text-summary' }]
    },
    reporters: ['progress', 'kjhtml'],
    port: 9876,
    colors: true,
    logLevel: config.LOG_INFO,
    autoWatch: true,
    browsers: ['Chrome'],
    singleRun: false,
    restartOnFileChange: true
  });
};
----

== Root Files

=== ExcelComparisonTool.sln
[source]
----
Microsoft Visual Studio Solution File, Format Version 12.00
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ExcelComparisonTool.Core", "backend/src/ExcelComparisonTool.Core/ExcelComparisonTool.Core.csproj", "{GUID1}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ExcelComparisonTool.Api", "backend/src/ExcelComparisonTool.Api/ExcelComparisonTool.Api.csproj", "{GUID2}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ExcelComparisonTool.Tests", "backend/tests/ExcelComparisonTool.Tests/ExcelComparisonTool.Tests.csproj", "{GUID3}"
EndProject
Global
  GlobalSection(SolutionConfigurationPlatforms) = preSolution
    Debug|Any CPU = Debug|Any CPU
    Release|Any CPU = Release|Any CPU
  EndGlobalSection
  GlobalSection(ProjectConfigurationPlatforms) = postSolution
    {GUID1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    {GUID1}.Release|Any CPU.ActiveCfg = Release|Any CPU
    {GUID2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    {GUID2}.Release|Any CPU.ActiveCfg = Release|Any CPU
    {GUID3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
    {GUID3}.Release|Any CPU.ActiveCfg = Release|Any CPU
  EndGlobalSection
EndGlobal
----

=== .gitignore
[source]
----
# .NET
bin/
obj/
*.csproj.user
*.suo
*.cache
*.dll
*.pdb
*.log

# Angular
node_modules/
dist/
coverage/
*.log
----

== Notes
- *Features Implemented*: File upload, cell value/formula comparison, diff visualization, output file generation, summary report.
- *Not Implemented*: Merge functionality (requires additional `MergeHandler` and `MergeComponent`), formatting comparison (extend `CellStyle` and `ComparisonEngine`).
- *Testing*: Includes a basic unit test for `ComparisonEngine`. Add test files to `backend/tests/TestData/`.
- *Performance*: Handles small to medium Excel files. For large files (>10,000 cells), enable EPPlus streaming and Angular virtual scrolling.
- *Security*: Validates file extensions. Add file scanning for production use.

== Conclusion
This implementation provides a complete, runnable Excel Comparison Tool with a .NET 6 backend and Angular 17 frontend. It supports core comparison features and is extensible for merge and formatting comparison. Follow the setup instructions to build and run the application.
```